// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// pseudoreplicatesbymodel
NumericMatrix pseudoreplicatesbymodel(int rows, int colums, NumericVector alpha, NumericVector vargenes, NumericVector meangenes, int positive, Function f, int seed);
RcppExport SEXP sincell_pseudoreplicatesbymodel(SEXP rowsSEXP, SEXP columsSEXP, SEXP alphaSEXP, SEXP vargenesSEXP, SEXP meangenesSEXP, SEXP positiveSEXP, SEXP fSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type rows(rowsSEXP );
        Rcpp::traits::input_parameter< int >::type colums(columsSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type vargenes(vargenesSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type meangenes(meangenesSEXP );
        Rcpp::traits::input_parameter< int >::type positive(positiveSEXP );
        Rcpp::traits::input_parameter< Function >::type f(fSEXP );
        Rcpp::traits::input_parameter< int >::type seed(seedSEXP );
        NumericMatrix __result = pseudoreplicatesbymodel(rows, colums, alpha, vargenes, meangenes, positive, f, seed);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// pseudoreplicatesbynoise
NumericMatrix pseudoreplicatesbynoise(NumericMatrix originaldata, int rows, int colums, NumericVector deciles, int lengthdeciles, NumericVector coorsorted, NumericVector vargenessorted, int positive, int seed);
RcppExport SEXP sincell_pseudoreplicatesbynoise(SEXP originaldataSEXP, SEXP rowsSEXP, SEXP columsSEXP, SEXP decilesSEXP, SEXP lengthdecilesSEXP, SEXP coorsortedSEXP, SEXP vargenessortedSEXP, SEXP positiveSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type originaldata(originaldataSEXP );
        Rcpp::traits::input_parameter< int >::type rows(rowsSEXP );
        Rcpp::traits::input_parameter< int >::type colums(columsSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type deciles(decilesSEXP );
        Rcpp::traits::input_parameter< int >::type lengthdeciles(lengthdecilesSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type coorsorted(coorsortedSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type vargenessorted(vargenessortedSEXP );
        Rcpp::traits::input_parameter< int >::type positive(positiveSEXP );
        Rcpp::traits::input_parameter< int >::type seed(seedSEXP );
        NumericMatrix __result = pseudoreplicatesbynoise(originaldata, rows, colums, deciles, lengthdeciles, coorsorted, vargenessorted, positive, seed);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// pseudoreplicatesbynoise_cv2
NumericMatrix pseudoreplicatesbynoise_cv2(NumericMatrix originaldata, int rows, int colums, NumericVector deciles, int lengthdeciles, NumericVector coorsorted, NumericVector vargenessorted, NumericVector means, int positive, int seed);
RcppExport SEXP sincell_pseudoreplicatesbynoise_cv2(SEXP originaldataSEXP, SEXP rowsSEXP, SEXP columsSEXP, SEXP decilesSEXP, SEXP lengthdecilesSEXP, SEXP coorsortedSEXP, SEXP vargenessortedSEXP, SEXP meansSEXP, SEXP positiveSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type originaldata(originaldataSEXP );
        Rcpp::traits::input_parameter< int >::type rows(rowsSEXP );
        Rcpp::traits::input_parameter< int >::type colums(columsSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type deciles(decilesSEXP );
        Rcpp::traits::input_parameter< int >::type lengthdeciles(lengthdecilesSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type coorsorted(coorsortedSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type vargenessorted(vargenessortedSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type means(meansSEXP );
        Rcpp::traits::input_parameter< int >::type positive(positiveSEXP );
        Rcpp::traits::input_parameter< int >::type seed(seedSEXP );
        NumericMatrix __result = pseudoreplicatesbynoise_cv2(originaldata, rows, colums, deciles, lengthdeciles, coorsorted, vargenessorted, means, positive, seed);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// sstalgorithm
NumericVector sstalgorithm(NumericVector membership, int num_cells, NumericMatrix distance);
RcppExport SEXP sincell_sstalgorithm(SEXP membershipSEXP, SEXP num_cellsSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type membership(membershipSEXP );
        Rcpp::traits::input_parameter< int >::type num_cells(num_cellsSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type distance(distanceSEXP );
        NumericVector __result = sstalgorithm(membership, num_cells, distance);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
